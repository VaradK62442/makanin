"""
Program to count the number of equations generated by a matrix of size n.

Only generate matrices that lead to equations with differing number of constants.
- Need to filter these out.
- e.g. having all 1's will lead to same number of constants.

Use `matrixGenerator.py` to generate the matrices.
Use `matrixSolution.py` to generate the equations.
Use this result to verify the formula in `matrixSolution.md`.
"""

from typing import List
from math import comb, ceil
from pprint import pprint as pp

from matrixGenerator import MatrixGenerator
from matrixSolution import MatrixSolution


def derived_formula(n: int):
    return sum([
        2 * comb(n, k) * sum([
            comb(k, i) for i in range(ceil(k/2))
        ]) * sum([
            2**j * comb(n-k, j) for j in range(n-k+1)
        ]) for k in range(n+1)
    ])

def generate_matrices(n: int) -> List[List[List[str]]]:
    return MatrixGenerator(n).generate_matrices()

def filter_matrices(matrices: List[List[List[str]]]) -> List[List[List[str]]]:
    # contribution dict measures disparity of number of constants
    # 1 -> 0 since number of constants remains the same
    # a -> 1 since number of constants differs by 1
    contribution_dict = {
        "1": 0,
        "a": 1,
        "b": 1,
    }
    m = []
    for matrix in matrices:
        if sum([
            contribution_dict[element] for element in [
                matrix[i][i] for i in range(len(matrix))
            ]
        ]) != 0:
            m.append(matrix)

    return m

def generate_equations(matrix: List[List[str]]) -> List[str]:
    return MatrixSolution(matrix).get_possible_equations()


def run(n: int):
    print(f"{n=}")
    total_equations = 0
    matrices = generate_matrices(n)
    matrices = filter_matrices(matrices)
    for matrix in matrices:
        total_equations += len(generate_equations(matrix))

    print(f"formula: {derived_formula(n)}\ntotal equations: {total_equations}")
    print(f"totals match: {derived_formula(n) == total_equations}\n")   


def main():
    limit = 7
    for n in range(1, limit+1):
        run(n)

if __name__ == "__main__":
    main()